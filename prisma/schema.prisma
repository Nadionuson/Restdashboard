generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ContactDetails {
  id          Int          @id @default(autoincrement())
  address     String?
  latitude    String?
  longitude   String?
  phoneNumber String?
  website      String?
  openingHours String?
  restaurantId       Int        @unique
  restaurant         Restaurant @relation(fields: [restaurantId], references: [id])
}

model Restaurant {
  id           Int          @id @default(autoincrement())
  name         String
  city         String
  status       String
  highlights   String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  ownerId      Int?
  privacyLevel PrivacyLevel @default(PUBLIC)
  neighborhood String?
  contactDetail ContactDetails?
  comments     Comment[]
  evaluation   Evaluation?
  owner        User?        @relation(fields: [ownerId], references: [id])
  hashtags     Hashtag[]    @relation("RestaurantHashtags")
  isActive     Boolean      @default(true) // Soft-delete flag
}

model Evaluation {
  id                 Int        @id @default(autoincrement())
  locationRating     Int
  serviceRating      Int
  priceQualityRating Int
  foodQualityRating  Int
  atmosphereRating   Int
  finalEvaluation    Float
  restaurantId       Int        @unique
  restaurant         Restaurant @relation(fields: [restaurantId], references: [id])
}

model Hashtag {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  restaurants Restaurant[] @relation("RestaurantHashtags")
}

model RestaurantHistory {
  id         Int
  name       String
  location   String
  status     String
  highlights String?
  evaluation Json
  hashtags   Json
  createdAt  DateTime
  updatedAt  DateTime
  deletedAt  DateTime @default(now())

  @@id([id, deletedAt])
}

model User {
  id                  Int          @id @default(autoincrement())
  email               String       @unique
  passwordHash        String?
  loginCode           String?
  loginCodeExpires    DateTime?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  username            String       @unique
  comments            Comment[]
  receivedFriendships Friend[]     @relation("ReceivedFriendRequests")
  sentFriendships     Friend[]     @relation("SentFriendRequests")
  restaurants         Restaurant[]
}

model Friend {
  id          Int      @id @default(autoincrement())
  requesterId Int
  addresseeId Int
  status      String
  createdAt   DateTime @default(now())
  addressee   User     @relation("ReceivedFriendRequests", fields: [addresseeId], references: [id])
  requester   User     @relation("SentFriendRequests", fields: [requesterId], references: [id])

  @@unique([requesterId, addresseeId])
}

model Comment {
  id           Int        @id @default(autoincrement())
  content      String
  userId       Int
  restaurantId Int
  createdAt    DateTime   @default(now())
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

enum PrivacyLevel {
  PUBLIC
  PRIVATE
  FRIENDS_ONLY
}
