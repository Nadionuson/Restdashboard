generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PrivacyLevel {
  PUBLIC
  PRIVATE
  FRIENDS_ONLY
}

model Restaurant {
  id           Int          @id @default(autoincrement())
  name         String
  city         String
  neighborhood String?
  status       String
  highlights   String?
  evaluation   Evaluation?
  hashtags     Hashtag[]    @relation("RestaurantHashtags")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  ownerId      Int?
  owner        User?        @relation(fields: [ownerId], references: [id])
  privacyLevel PrivacyLevel @default(PUBLIC) // NEW
  comments     Comment[] // NEW
}

model Evaluation {
  id                 Int   @id @default(autoincrement())
  locationRating     Int
  serviceRating      Int
  priceQualityRating Int
  foodQualityRating  Int
  atmosphereRating   Int
  finalEvaluation    Float

  restaurantId Int        @unique
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
}

model Hashtag {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  restaurants Restaurant[] @relation("RestaurantHashtags")
}

model RestaurantHistory {
  id         Int
  name       String
  location   String
  status     String
  highlights String?
  evaluation Json
  hashtags   Json
  createdAt  DateTime
  updatedAt  DateTime
  deletedAt  DateTime @default(now())

  @@id([id, deletedAt])
}

model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  username         String    @unique
  passwordHash     String?
  loginCode        String?
  loginCodeExpires DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  restaurants Restaurant[]
  comments    Comment[]

  sentFriendships     Friend[] @relation("SentFriendRequests")
  receivedFriendships Friend[] @relation("ReceivedFriendRequests")
}

model Friend {
  id          Int      @id @default(autoincrement())
  requesterId Int
  addresseeId Int
  status      String // "pending", "accepted", "rejected"
  createdAt   DateTime @default(now())

  requester User @relation("SentFriendRequests", fields: [requesterId], references: [id])
  addressee User @relation("ReceivedFriendRequests", fields: [addresseeId], references: [id])

  @@unique([requesterId, addresseeId])
}

model Comment {
  id           Int      @id @default(autoincrement())
  content      String
  userId       Int
  restaurantId Int
  createdAt    DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id])
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
}
